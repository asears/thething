# RAG runner
name: rag-runner

on:
  workflow_dispatch:

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.13"  # ${{ vars.PYTHON_VERSION_VAR }}  # for environments in github or general repo setting.
  
jobs:
  quality-check:
    name: quality-check
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        python-version:
          - "3.12"
    # continue-on-error: false
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            pyproject.toml
            thething
            tests

      # - name: Checkout tools repo
      #   uses: actions/checkout@v4
      #   with:
      #     repository: my-org/my-tools
      #     path: my-tools            
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
        
      # NOTE: uvx locally may be blocked by some security software
      - name: ruff lint
        run: >
          uvx ruff@latest check .
          --select "ALL"
          --preview
        # continue-on-error: false
        
      - name: ruff format check
        if: ${{ success() }} || ${{ failure() }}
        run: uvx ruff@latest format --check
        # As of September 28, 2024, continue on error true shows green even though step failed.
        # continue-on-error: false
        
  rag-bot:
    name: rag-bot
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        python-version:
          # - "3.10"
          # - "3.11"
          - "3.12"
    continue-on-error: false
    steps:
      - uses: actions/checkout@v4
      # This step is not required if using uv python install
      # It can be faster to use this instead of uv
      # because GitHub caches the Python versions alongside the runner
      
      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: ${{ env.PYTHON_VERSION }}  # ${{ matrix.python-version }}
      #     # python-version-file: ".python-version"
      #     # python-version-file: "pyproject.toml"  # requires-python
       
      # https://github.com/yezz123/setup-uv
      # https://github.com/marketplace/actions/uv-venv
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          # tool-dir: "/path/to/tool/dir"
          # tool-bin-dir: "/path/to/tool-bin/dir"
          # enable-cache: true
          # cache-local-path: "/path/to/cache"
          # cache-dependency-glob: "uv.lock" 
          # cache-dependency-glob: "requirements**.txt"
          
      - name: Install Python ${{ env.PYTHON_VERSION }}  # ${{ matrix.python-version }}
        run: |
          uv python install $PYTHON_VERSION  # ${{ matrix.python-version }}
        env:
          PYTHON_VERSION: ${{ env.PYTHON_VERSION }}
      
      # canonically, .venv can be used as default path with uv venv
      # however we may want multiple named environments/paths here for testing matrix of dependencies on different branches or files
      # using checkout branch or specific files
      # A variable for the folder for the venv could be extracted for reuse
      # the --seed param can be used to install pip, setuptools, wheel into venv automatically
      # uv can use UV_SYSTEM_PYTHON=1 or --system for ci environments with transitory agents
      # --prompt can be used to customize venv prompt to include things like python version or specific ci scenario identifiers
      # -p can be used to specify a specific python environment, installing dynamically as part of venv creation
      # no more Anaconda or pipenv
      # -v for verbose
      # Simple pinning of dependencies by date
      # --exclude-newer '2024-09-30T02:07:43Z' or '2024-09-30'
      # RUST_LOG= for fine grained logging
      # UV_NATIVE_TLS=1 for corporate trust store
      # UV_NO_CACHE=1 for using no caching
      # source .venv/bin/activate &&
      
      - name: create uv virtual environment venv
        run: |
          uv venv venv

      # https://pytest-with-eric.com/pytest-best-practices/pytest-plugins/
      - name: pytest
        run: >
          source venv/bin/activate &&
          uv pip install -U 
          pytest pytest-mock pytest-cov 
          pytest-sugar 
          pytest-asyncio 
          pytest-xdist 
          pytest-timeout 
          pytest-html 
          pytest-profiling

      # https://docs.astral.sh/uv/concepts/projects
      - name: Install the project
        run: |
          uv sync --all-extras --dev
          # uv sync --extra build
          # uv sync --extra build --extra compile
        continue-on-error: true
        
      - name: Test with frozen dependencies
        run: |
          uv run --frozen pytest
          # uv run --frozen pytest tests/unit --cov
        continue-on-error: true
        
      # https://docs.llamaindex.ai/en/stable/getting_started/starter_tools/rag_cli/
      - name: Install llama and chromadb
        run: |
          source venv/bin/activate
          uv pip install -U llama-index chromadb llama-index-vector-stores-chroma
          
      - name: ingest vectordb files
        run: |
          source venv/bin/activate
          llamaindex-cli rag --files "./README.md"
        continue-on-error: true
        env:
          OPENAI_API_KEY: $ {{ secrets.OPENAI_API_KEY }}
          
        # llamaindex-cli rag --files "./docs/**/*.rst"

        # llamaindex-cli rag --question "What is this project and how could I make the readme better?"

      # Documentation
      # https://github.com/astral-sh/uv/issues/6578
      # uv run --no-dev
      # uv run --no-project
      # after setting up project, delete pyproject.toml, uv.lock before packaging?
      # uvx --with-requirements docs/requirements.txt -- mkdocs serve -f mkdocs.public.yml
      # Teardown
      # - name: Minimize uv cache
      #  run: uv cache prune --ci
